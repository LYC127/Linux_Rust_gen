fn ramfs_get_inode(sb: &super_block, dir: Option<&inode>, mode: umode_t, dev: dev_t) -> Option<&inode> {
    let inode = new_inode(sb);

    if let Some(inode) = inode {
        inode.i_ino = get_next_ino();
        inode_init_owner(inode, dir, mode);
        inode.i_mapping.a_ops = &ramfs_aops;
        mapping_set_gfp_mask(inode.i_mapping, GFP_HIGHUSER);
        mapping_set_unevictable(inode.i_mapping);
        inode.i_atime = current_time(inode);
        inode.i_mtime = inode.i_atime;
        inode.i_ctime = inode.i_atime;

        match mode & S_IFMT {
            S_IFREG => {
                inode.i_op = &ramfs_file_inode_operations;
                inode.i_fop = &ramfs_file_operations;
            }
            S_IFDIR => {
                inode.i_op = &ramfs_dir_inode_operations;
                inode.i_fop = &simple_dir_operations;
                inc_nlink(inode);
            }
            S_IFLNK => {
                inode.i_op = &page_symlink_inode_operations;
                inode_nohighmem(inode);
            }
            _ => init_special_inode(inode, mode, dev),
        }
    }
    inode
}